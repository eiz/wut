diff --git a/src/cmd/internal/obj/link.go b/src/cmd/internal/obj/link.go
index 8bdc3f5..af4ba2f 100644
--- a/src/cmd/internal/obj/link.go
+++ b/src/cmd/internal/obj/link.go
@@ -367,10 +367,13 @@ const (
 	// definition. (When not compiling to support Go shared libraries, all symbols are
 	// local in this sense unless there is a cgo_export_* directive).
 	AttrLocal
+
+	AttrAlign4K
 )
 
 func (a Attribute) DuplicateOK() bool   { return a&AttrDuplicateOK != 0 }
 func (a Attribute) MakeTypelink() bool  { return a&AttrMakeTypelink != 0 }
+func (a Attribute) Align4K() bool       { return a&AttrAlign4K != 0 }
 func (a Attribute) CFunc() bool         { return a&AttrCFunc != 0 }
 func (a Attribute) NoSplit() bool       { return a&AttrNoSplit != 0 }
 func (a Attribute) Leaf() bool          { return a&AttrLeaf != 0 }
@@ -408,6 +411,7 @@ var textAttrStrings = [...]struct {
 	{bit: AttrNeedCtxt, s: "NEEDCTXT"},
 	{bit: AttrNoFrame, s: "NOFRAME"},
 	{bit: AttrStatic, s: "STATIC"},
+	{bit: AttrAlign4K, s: "ALIGN4K"},
 }
 
 // TextAttrString formats a for printing in as part of a TEXT prog.
diff --git a/src/cmd/internal/obj/objfile.go b/src/cmd/internal/obj/objfile.go
index c550d43..bf7998f 100644
--- a/src/cmd/internal/obj/objfile.go
+++ b/src/cmd/internal/obj/objfile.go
@@ -89,7 +89,7 @@ func WriteObjFile(ctxt *Link, b *bufio.Writer) {
 	w := newObjWriter(ctxt, b)
 
 	// Magic header
-	w.wr.WriteString("\x00\x00go19ld")
+	w.wr.WriteString("\x00\x00gx19ld")
 
 	// Version
 	w.wr.WriteByte(1)
@@ -146,7 +146,7 @@ func WriteObjFile(ctxt *Link, b *bufio.Writer) {
 	}
 
 	// Magic footer
-	w.wr.WriteString("\xff\xffgo19ld")
+	w.wr.WriteString("\xff\xffgx19ld")
 }
 
 // Symbols are prefixed so their content doesn't get confused with the magic footer.
@@ -301,6 +301,9 @@ func (w *objWriter) writeSym(s *LSym) {
 	if s.MakeTypelink() {
 		flags |= 1 << 2
 	}
+	if s.Align4K() {
+		flags |= 1 << 3
+	}
 	w.writeInt(flags)
 	w.writeInt(s.Size)
 	w.writeRefIndex(s.Gotype)
diff --git a/src/cmd/internal/obj/plist.go b/src/cmd/internal/obj/plist.go
index 5c86c20..11831cd 100644
--- a/src/cmd/internal/obj/plist.go
+++ b/src/cmd/internal/obj/plist.go
@@ -132,6 +132,7 @@ func (ctxt *Link) InitTextSym(s *LSym, flag int) {
 	s.Set(AttrWrapper, flag&WRAPPER != 0)
 	s.Set(AttrNeedCtxt, flag&NEEDCTXT != 0)
 	s.Set(AttrNoFrame, flag&NOFRAME != 0)
+	s.Set(AttrAlign4K, flag&ALIGN4K != 0)
 	s.Type = objabi.STEXT
 	ctxt.Text = append(ctxt.Text, s)
 
@@ -168,6 +169,9 @@ func (ctxt *Link) Globl(s *LSym, size int64, flag int) {
 	if flag&DUPOK != 0 {
 		s.Set(AttrDuplicateOK, true)
 	}
+	if flag&ALIGN4K != 0 {
+		s.Set(AttrAlign4K, true)
+	}
 	if flag&RODATA != 0 {
 		s.Type = objabi.SRODATA
 	} else if flag&NOPTR != 0 {
diff --git a/src/cmd/internal/obj/textflag.go b/src/cmd/internal/obj/textflag.go
index d8a52da..28fb7d5 100644
--- a/src/cmd/internal/obj/textflag.go
+++ b/src/cmd/internal/obj/textflag.go
@@ -47,4 +47,6 @@ const (
 
 	// Function can call reflect.Type.Method or reflect.Type.MethodByName.
 	REFLECTMETHOD = 1024
+
+	ALIGN4K = 2048
 )
diff --git a/src/cmd/link/internal/amd64/asm.go b/src/cmd/link/internal/amd64/asm.go
index 03bd594..e20aad9 100644
--- a/src/cmd/link/internal/amd64/asm.go
+++ b/src/cmd/link/internal/amd64/asm.go
@@ -767,7 +767,7 @@ func asmb(ctxt *ld.Link) {
 					ctxt.Logf("%5.2f dwarf\n", ld.Cputime())
 				}
 
-				if ld.Linkmode == ld.LinkExternal {
+				if ld.Linkmode == ld.LinkExternal || *ld.FlagEmitReloc {
 					ld.Elfemitreloc(ctxt)
 				}
 			}
diff --git a/src/cmd/link/internal/ld/data.go b/src/cmd/link/internal/ld/data.go
index d724c59..867ea0c 100644
--- a/src/cmd/link/internal/ld/data.go
+++ b/src/cmd/link/internal/ld/data.go
@@ -32,9 +32,11 @@
 package ld
 
 import (
+	"bytes"
 	"cmd/internal/gcprog"
 	"cmd/internal/objabi"
 	"cmd/internal/sys"
+	"encoding/binary"
 	"fmt"
 	"log"
 	"os"
@@ -453,18 +455,21 @@ func relocsym(ctxt *Link, s *Symbol) {
 		case objabi.R_TLS_LE:
 			isAndroidX86 := objabi.GOOS == "android" && (SysArch.InFamily(sys.AMD64, sys.I386))
 
-			if Linkmode == LinkExternal && Iself && !isAndroidX86 {
+			if (Linkmode == LinkExternal || *FlagEmitReloc) && Iself && !isAndroidX86 {
 				r.Done = 0
 				if r.Sym == nil {
 					r.Sym = ctxt.Tlsg
 				}
 				r.Xsym = r.Sym
 				r.Xadd = r.Add
-				o = 0
-				if SysArch.Family != sys.AMD64 {
-					o = r.Add
+				if !*FlagEmitReloc {
+					o = 0
+					if SysArch.Family != sys.AMD64 {
+						o = r.Add
+					}
+
+					break
 				}
-				break
 			}
 
 			if Iself && SysArch.Family == sys.ARM {
@@ -487,18 +492,21 @@ func relocsym(ctxt *Link, s *Symbol) {
 		case objabi.R_TLS_IE:
 			isAndroidX86 := objabi.GOOS == "android" && (SysArch.InFamily(sys.AMD64, sys.I386))
 
-			if Linkmode == LinkExternal && Iself && !isAndroidX86 {
+			if (Linkmode == LinkExternal || *FlagEmitReloc) && Iself && !isAndroidX86 {
 				r.Done = 0
 				if r.Sym == nil {
 					r.Sym = ctxt.Tlsg
 				}
 				r.Xsym = r.Sym
 				r.Xadd = r.Add
-				o = 0
-				if SysArch.Family != sys.AMD64 {
-					o = r.Add
+
+				if !*FlagEmitReloc {
+					o = 0
+					if SysArch.Family != sys.AMD64 {
+						o = r.Add
+					}
+					break
 				}
-				break
 			}
 			if Buildmode == BuildmodePIE && Iself {
 				// We are linking the final executable, so we
@@ -516,7 +524,7 @@ func relocsym(ctxt *Link, s *Symbol) {
 			}
 
 		case objabi.R_ADDR:
-			if Linkmode == LinkExternal && r.Sym.Type != SCONST {
+			if (Linkmode == LinkExternal || *FlagEmitReloc) && r.Sym.Type != SCONST {
 				r.Done = 0
 
 				// set up addend for eventual relocation via outer symbol.
@@ -533,32 +541,34 @@ func relocsym(ctxt *Link, s *Symbol) {
 				}
 				r.Xsym = rs
 
-				o = r.Xadd
-				if Iself {
-					if SysArch.Family == sys.AMD64 {
-						o = 0
-					}
-				} else if Headtype == objabi.Hdarwin {
-					// ld64 for arm64 has a bug where if the address pointed to by o exists in the
-					// symbol table (dynid >= 0), or is inside a symbol that exists in the symbol
-					// table, then it will add o twice into the relocated value.
-					// The workaround is that on arm64 don't ever add symaddr to o and always use
-					// extern relocation by requiring rs->dynid >= 0.
-					if rs.Type != SHOSTOBJ {
-						if SysArch.Family == sys.ARM64 && rs.Dynid < 0 {
-							Errorf(s, "R_ADDR reloc to %s+%d is not supported on darwin/arm64", rs.Name, o)
+				if !*FlagEmitReloc {
+					o = r.Xadd
+					if Iself {
+						if SysArch.Family == sys.AMD64 {
+							o = 0
 						}
-						if SysArch.Family != sys.ARM64 {
-							o += Symaddr(rs)
+					} else if Headtype == objabi.Hdarwin {
+						// ld64 for arm64 has a bug where if the address pointed to by o exists in the
+						// symbol table (dynid >= 0), or is inside a symbol that exists in the symbol
+						// table, then it will add o twice into the relocated value.
+						// The workaround is that on arm64 don't ever add symaddr to o and always use
+						// extern relocation by requiring rs->dynid >= 0.
+						if rs.Type != SHOSTOBJ {
+							if SysArch.Family == sys.ARM64 && rs.Dynid < 0 {
+								Errorf(s, "R_ADDR reloc to %s+%d is not supported on darwin/arm64", rs.Name, o)
+							}
+							if SysArch.Family != sys.ARM64 {
+								o += Symaddr(rs)
+							}
 						}
+					} else if Headtype == objabi.Hwindows {
+						// nothing to do
+					} else {
+						Errorf(s, "unhandled pcrel relocation to %s on %v", rs.Name, Headtype)
 					}
-				} else if Headtype == objabi.Hwindows {
-					// nothing to do
-				} else {
-					Errorf(s, "unhandled pcrel relocation to %s on %v", rs.Name, Headtype)
-				}
 
-				break
+					break
+				}
 			}
 
 			o = Symaddr(r.Sym) + r.Add
@@ -577,7 +587,7 @@ func relocsym(ctxt *Link, s *Symbol) {
 			if r.Sym.Sect == nil {
 				Errorf(s, "missing DWARF section for relocation target %s", r.Sym.Name)
 			}
-			if Linkmode == LinkExternal {
+			if Linkmode == LinkExternal || *FlagEmitReloc {
 				r.Done = 0
 				// PE code emits IMAGE_REL_I386_SECREL and IMAGE_REL_AMD64_SECREL
 				// for R_DWARFREF relocations, while R_ADDR is replaced with
@@ -590,12 +600,15 @@ func relocsym(ctxt *Link, s *Symbol) {
 
 				r.Xsym = ctxt.Syms.ROLookup(r.Sym.Sect.Name, 0)
 				r.Xadd = r.Add + Symaddr(r.Sym) - int64(r.Sym.Sect.Vaddr)
-				o = r.Xadd
-				rs = r.Xsym
-				if Iself && SysArch.Family == sys.AMD64 {
-					o = 0
+
+				if !*FlagEmitReloc {
+					o = r.Xadd
+					rs = r.Xsym
+					if Iself && SysArch.Family == sys.AMD64 {
+						o = 0
+					}
+					break
 				}
-				break
 			}
 			o = Symaddr(r.Sym) + r.Add - int64(r.Sym.Sect.Vaddr)
 
@@ -628,7 +641,7 @@ func relocsym(ctxt *Link, s *Symbol) {
 			}
 			fallthrough
 		case objabi.R_CALL, objabi.R_PCREL:
-			if Linkmode == LinkExternal && r.Sym != nil && r.Sym.Type != SCONST && (r.Sym.Sect != s.Sect || r.Type == objabi.R_GOTPCREL) {
+			if (Linkmode == LinkExternal || *FlagEmitReloc) && r.Sym != nil && r.Sym.Type != SCONST && (r.Sym.Sect != s.Sect || r.Type == objabi.R_GOTPCREL) {
 				r.Done = 0
 
 				// set up addend for eventual relocation via outer symbol.
@@ -646,32 +659,34 @@ func relocsym(ctxt *Link, s *Symbol) {
 				}
 				r.Xsym = rs
 
-				o = r.Xadd
-				if Iself {
-					if SysArch.Family == sys.AMD64 {
-						o = 0
-					}
-				} else if Headtype == objabi.Hdarwin {
-					if r.Type == objabi.R_CALL {
-						if rs.Type != SHOSTOBJ {
-							o += int64(uint64(Symaddr(rs)) - rs.Sect.Vaddr)
+				if !*FlagEmitReloc {
+					o = r.Xadd
+					if Iself {
+						if SysArch.Family == sys.AMD64 {
+							o = 0
 						}
-						o -= int64(r.Off) // relative to section offset, not symbol
-					} else if SysArch.Family == sys.ARM {
-						// see ../arm/asm.go:/machoreloc1
-						o += Symaddr(rs) - int64(s.Value) - int64(r.Off)
-					} else {
+					} else if Headtype == objabi.Hdarwin {
+						if r.Type == objabi.R_CALL {
+							if rs.Type != SHOSTOBJ {
+								o += int64(uint64(Symaddr(rs)) - rs.Sect.Vaddr)
+							}
+							o -= int64(r.Off) // relative to section offset, not symbol
+						} else if SysArch.Family == sys.ARM {
+							// see ../arm/asm.go:/machoreloc1
+							o += Symaddr(rs) - int64(s.Value) - int64(r.Off)
+						} else {
+							o += int64(r.Siz)
+						}
+					} else if Headtype == objabi.Hwindows && SysArch.Family == sys.AMD64 { // only amd64 needs PCREL
+						// PE/COFF's PC32 relocation uses the address after the relocated
+						// bytes as the base. Compensate by skewing the addend.
 						o += int64(r.Siz)
+					} else {
+						Errorf(s, "unhandled pcrel relocation to %s on %v", rs.Name, Headtype)
 					}
-				} else if Headtype == objabi.Hwindows && SysArch.Family == sys.AMD64 { // only amd64 needs PCREL
-					// PE/COFF's PC32 relocation uses the address after the relocated
-					// bytes as the base. Compensate by skewing the addend.
-					o += int64(r.Siz)
-				} else {
-					Errorf(s, "unhandled pcrel relocation to %s on %v", rs.Name, Headtype)
-				}
 
-				break
+					break
+				}
 			}
 
 			o = 0
@@ -993,7 +1008,7 @@ func Datblk(ctxt *Link, addr int64, size int64) {
 		}
 		ctxt.Logf("\n")
 
-		if Linkmode != LinkExternal {
+		if Linkmode != LinkExternal && !*FlagEmitReloc {
 			continue
 		}
 		for _, r := range sym.R {
@@ -1569,7 +1584,7 @@ func (ctxt *Link) dodata() {
 
 	if len(data[STLSBSS]) > 0 {
 		var sect *Section
-		if Iself && (Linkmode == LinkExternal || !*FlagD) {
+		if Iself && (Linkmode == LinkExternal || !*FlagD || *FlagEmitReloc) {
 			sect = addsection(&Segdata, ".tbss", 06)
 			sect.Align = int32(SysArch.PtrSize)
 			sect.Vaddr = 0
@@ -2016,6 +2031,69 @@ func (ctxt *Link) textbuildid() {
 	ctxt.Textp[0] = sym
 }
 
+type multibootHdr struct {
+	magic       uint32
+	flags       uint32
+	checksum    uint32
+	headeraddr  uint32
+	loadaddr    uint32
+	loadendaddr uint32
+	bssendaddr  uint32
+	entryaddr   uint32
+}
+
+// Add multiboot header to beginning of text segment. The multiboot header
+// always includes the load and entry addresses to allow for the use of ELF64
+// boot images. This only reserves space for the header -- the values must be
+// filled in later.
+func (ctxt *Link) textmultiboot() {
+	if !*flagMultiboot {
+		return
+	}
+
+	var dummy multibootHdr
+	sym := ctxt.Syms.Lookup("go.multiboot", 0)
+	sym.Attr |= AttrReachable
+	sym.Type = STEXT
+	sym.P = make([]byte, binary.Size(&dummy))
+	sym.Size = int64(len(sym.P))
+	sym.Align = 4
+
+	ctxt.Textp = append(ctxt.Textp, nil)
+	copy(ctxt.Textp[1:], ctxt.Textp)
+	ctxt.Textp[0] = sym
+}
+
+// Fills in multiboot header with finalized addresses.
+func (ctxt *Link) fillmultiboot() {
+	sym := ctxt.Syms.Lookup("go.multiboot", 0)
+	sect := Segtext.Sections[0]
+	end := ctxt.Syms.Lookup("runtime.end", 0).Sect
+	entry := ctxt.Syms.ROLookup(*flagEntrySymbol, 0)
+
+	if sym == nil || entry == nil {
+		return
+	}
+
+	hdr := &multibootHdr{
+		magic:      0x1BADB002,
+		flags:      0x10003,
+		checksum:   0,
+		headeraddr: uint32(sym.Value),
+		// XXX text start must be set such that there's sufficient space to map
+		// the image header.
+		loadaddr: uint32(sect.Vaddr - Segtext.Fileoff),
+		// Load from beginning of text to end of non-bss data sections
+		loadendaddr: uint32(Segdata.Vaddr + Segdata.Filelen),
+		bssendaddr:  uint32(end.Vaddr + end.Length),
+		entryaddr:   uint32(entry.Value),
+	}
+	hdr.checksum = uint32(0) - hdr.flags - hdr.magic
+	buf := new(bytes.Buffer)
+	binary.Write(buf, binary.LittleEndian, hdr)
+	sym.P = buf.Bytes()
+}
+
 // assign addresses to text
 func (ctxt *Link) textaddress() {
 	addsection(&Segtext, ".text", 05)
diff --git a/src/cmd/link/internal/ld/dwarf.go b/src/cmd/link/internal/ld/dwarf.go
index a0c5565..324b720 100644
--- a/src/cmd/link/internal/ld/dwarf.go
+++ b/src/cmd/link/internal/ld/dwarf.go
@@ -1588,7 +1588,7 @@ func dwarfaddshstrings(ctxt *Link, shstrtab *Symbol) {
 	Addstring(shstrtab, ".debug_pubnames")
 	Addstring(shstrtab, ".debug_pubtypes")
 	Addstring(shstrtab, ".debug_gdb_scripts")
-	if Linkmode == LinkExternal {
+	if Linkmode == LinkExternal || *FlagEmitReloc {
 		Addstring(shstrtab, elfRelType+".debug_info")
 		Addstring(shstrtab, elfRelType+".debug_aranges")
 		Addstring(shstrtab, elfRelType+".debug_line")
@@ -1604,7 +1604,7 @@ func dwarfaddelfsectionsyms(ctxt *Link) {
 	if *FlagW { // disable dwarf
 		return
 	}
-	if Linkmode != LinkExternal {
+	if Linkmode != LinkExternal && !*FlagEmitReloc {
 		return
 	}
 	sym := ctxt.Syms.Lookup(".debug_info", 0)
diff --git a/src/cmd/link/internal/ld/elf.go b/src/cmd/link/internal/ld/elf.go
index 0fc947f..bfe95a2 100644
--- a/src/cmd/link/internal/ld/elf.go
+++ b/src/cmd/link/internal/ld/elf.go
@@ -1804,6 +1804,7 @@ func elfrelocsect(ctxt *Link, sect *Section, syms []*Symbol) {
 		}
 		for ri := 0; ri < len(sym.R); ri++ {
 			r := &sym.R[ri]
+
 			if r.Done != 0 {
 				continue
 			}
@@ -1897,7 +1898,7 @@ func (ctxt *Link) doelf() {
 	// generate .tbss section for dynamic internal linker or external
 	// linking, so that various binutils could correctly calculate
 	// PT_TLS size. See https://golang.org/issue/5200.
-	if !*FlagD || Linkmode == LinkExternal {
+	if !*FlagD || Linkmode == LinkExternal || *FlagEmitReloc {
 		Addstring(shstrtab, ".tbss")
 	}
 	if Headtype == objabi.Hnetbsd {
@@ -1925,8 +1926,10 @@ func (ctxt *Link) doelf() {
 	Addstring(shstrtab, relro_prefix+".gosymtab")
 	Addstring(shstrtab, relro_prefix+".gopclntab")
 
-	if Linkmode == LinkExternal {
-		*FlagD = true
+	if Linkmode == LinkExternal || *FlagEmitReloc {
+		if !*FlagEmitReloc {
+			*FlagD = true
+		}
 
 		Addstring(shstrtab, elfRelType+".text")
 		Addstring(shstrtab, elfRelType+".rodata")
@@ -2582,7 +2585,7 @@ elfobj:
 		elfshbits(sect)
 	}
 
-	if Linkmode == LinkExternal {
+	if Linkmode == LinkExternal || *FlagEmitReloc {
 		for _, sect := range Segtext.Sections {
 			elfshreloc(sect)
 		}
diff --git a/src/cmd/link/internal/ld/lib.go b/src/cmd/link/internal/ld/lib.go
index 43c7d73..20c7fe6 100644
--- a/src/cmd/link/internal/ld/lib.go
+++ b/src/cmd/link/internal/ld/lib.go
@@ -1645,6 +1645,10 @@ func (ctxt *Link) dostkcheck() {
 
 	ch.limit = objabi.StackLimit - callsize(ctxt)
 
+	if *flagMultiboot {
+		ch.limit = 4096 - callsize(ctxt)
+	}
+
 	// Check every function, but do the nosplit functions in a first pass,
 	// to make the printed failure chains as short as possible.
 	for _, s := range ctxt.Textp {
@@ -1967,7 +1971,7 @@ func genasmsym(ctxt *Link, put func(*Link, *Symbol, string, SymbolType, int64, *
 			put(ctxt, s, s.Extname, UndefinedSym, 0, nil)
 
 		case STLSBSS:
-			if Linkmode == LinkExternal {
+			if Linkmode == LinkExternal || *FlagEmitReloc {
 				put(ctxt, s, s.Name, TLSSym, Symaddr(s), s.Gotype)
 			}
 		}
diff --git a/src/cmd/link/internal/ld/link.go b/src/cmd/link/internal/ld/link.go
index 089b4d3..7ba0b29 100644
--- a/src/cmd/link/internal/ld/link.go
+++ b/src/cmd/link/internal/ld/link.go
@@ -135,6 +135,7 @@ const (
 	// AttrMakeTypelink Amarks types that should be added to the typelink
 	// table. See typelinks.go:typelinks().
 	AttrMakeTypelink
+	AttrAlign4K
 )
 
 func (a Attribute) DuplicateOK() bool      { return a&AttrDuplicateOK != 0 }
@@ -150,6 +151,7 @@ func (a Attribute) OnList() bool           { return a&AttrOnList != 0 }
 func (a Attribute) Local() bool            { return a&AttrLocal != 0 }
 func (a Attribute) ReflectMethod() bool    { return a&AttrReflectMethod != 0 }
 func (a Attribute) MakeTypelink() bool     { return a&AttrMakeTypelink != 0 }
+func (a Attribute) Align4K() bool          { return a&AttrAlign4K != 0 }
 
 func (a Attribute) CgoExport() bool {
 	return a.CgoExportDynamic() || a.CgoExportStatic()
diff --git a/src/cmd/link/internal/ld/main.go b/src/cmd/link/internal/ld/main.go
index 0078064..0bebaa8 100644
--- a/src/cmd/link/internal/ld/main.go
+++ b/src/cmd/link/internal/ld/main.go
@@ -87,6 +87,8 @@ var (
 	Flag8           bool // use 64-bit addresses in symbol table
 	flagInterpreter = flag.String("I", "", "use `linker` as ELF dynamic linker")
 	FlagDebugTramp  = flag.Int("debugtramp", 0, "debug trampolines")
+	flagMultiboot   = flag.Bool("multiboot", false, "generate multiboot header")
+	FlagEmitReloc   = flag.Bool("emit-reloc", false, "always emit relocations")
 
 	flagHeadtype    = flag.String("H", "", "set header `type`")
 	FlagRound       = flag.Int("R", -1, "set address rounding `quantum`")
@@ -210,6 +212,7 @@ func Main() {
 	ctxt.addexport()
 	Thearch.Gentext(ctxt) // trampolines, call stubs, etc.
 	ctxt.textbuildid()
+	ctxt.textmultiboot()
 	ctxt.textaddress()
 	ctxt.pclntab()
 	ctxt.findfunctab()
@@ -218,6 +221,7 @@ func Main() {
 	ctxt.dodata()
 	ctxt.address()
 	ctxt.reloc()
+	ctxt.fillmultiboot()
 	Thearch.Asmb(ctxt)
 	ctxt.undef()
 	ctxt.hostlink()
diff --git a/src/cmd/link/internal/ld/objfile.go b/src/cmd/link/internal/ld/objfile.go
index c91fe28..ff36b8f 100644
--- a/src/cmd/link/internal/ld/objfile.go
+++ b/src/cmd/link/internal/ld/objfile.go
@@ -21,8 +21,8 @@ import (
 )
 
 const (
-	startmagic = "\x00\x00go19ld"
-	endmagic   = "\xff\xffgo19ld"
+	startmagic = "\x00\x00gx19ld"
+	endmagic   = "\xff\xffgx19ld"
 )
 
 var emptyPkg = []byte(`"".`)
@@ -169,6 +169,7 @@ func (r *objReader) readSym() {
 	dupok := flags&1 != 0
 	local := flags&2 != 0
 	makeTypelink := flags&4 != 0
+	align4k := flags&8 != 0
 	size := r.readInt()
 	typ := r.readSymIndex()
 	data := r.readData()
@@ -206,6 +207,10 @@ overwrite:
 	if dupok {
 		s.Attr |= AttrDuplicateOK
 	}
+	if align4k {
+		s.Attr |= AttrAlign4K
+		s.Align = 4096
+	}
 	if t == SXREF {
 		log.Fatalf("bad sxref")
 	}
diff --git a/src/runtime/textflag.h b/src/runtime/textflag.h
index 929e9b3..6798765 100644
--- a/src/runtime/textflag.h
+++ b/src/runtime/textflag.h
@@ -32,3 +32,4 @@
 #define NOFRAME 512
 // Function can call reflect.Type.Method or reflect.Type.MethodByName.
 #define REFLECTMETHOD = 1024
+#define ALIGN4K 2048
