diff --git a/src/cmd/internal/obj/link.go b/src/cmd/internal/obj/link.go
index 8bdc3f5..af4ba2f 100644
--- a/src/cmd/internal/obj/link.go
+++ b/src/cmd/internal/obj/link.go
@@ -367,10 +367,13 @@ const (
 	// definition. (When not compiling to support Go shared libraries, all symbols are
 	// local in this sense unless there is a cgo_export_* directive).
 	AttrLocal
+
+	AttrAlign4K
 )
 
 func (a Attribute) DuplicateOK() bool   { return a&AttrDuplicateOK != 0 }
 func (a Attribute) MakeTypelink() bool  { return a&AttrMakeTypelink != 0 }
+func (a Attribute) Align4K() bool       { return a&AttrAlign4K != 0 }
 func (a Attribute) CFunc() bool         { return a&AttrCFunc != 0 }
 func (a Attribute) NoSplit() bool       { return a&AttrNoSplit != 0 }
 func (a Attribute) Leaf() bool          { return a&AttrLeaf != 0 }
@@ -408,6 +411,7 @@ var textAttrStrings = [...]struct {
 	{bit: AttrNeedCtxt, s: "NEEDCTXT"},
 	{bit: AttrNoFrame, s: "NOFRAME"},
 	{bit: AttrStatic, s: "STATIC"},
+	{bit: AttrAlign4K, s: "ALIGN4K"},
 }
 
 // TextAttrString formats a for printing in as part of a TEXT prog.
diff --git a/src/cmd/internal/obj/objfile.go b/src/cmd/internal/obj/objfile.go
index c550d43..bf7998f 100644
--- a/src/cmd/internal/obj/objfile.go
+++ b/src/cmd/internal/obj/objfile.go
@@ -89,7 +89,7 @@ func WriteObjFile(ctxt *Link, b *bufio.Writer) {
 	w := newObjWriter(ctxt, b)
 
 	// Magic header
-	w.wr.WriteString("\x00\x00go19ld")
+	w.wr.WriteString("\x00\x00gx19ld")
 
 	// Version
 	w.wr.WriteByte(1)
@@ -146,7 +146,7 @@ func WriteObjFile(ctxt *Link, b *bufio.Writer) {
 	}
 
 	// Magic footer
-	w.wr.WriteString("\xff\xffgo19ld")
+	w.wr.WriteString("\xff\xffgx19ld")
 }
 
 // Symbols are prefixed so their content doesn't get confused with the magic footer.
@@ -301,6 +301,9 @@ func (w *objWriter) writeSym(s *LSym) {
 	if s.MakeTypelink() {
 		flags |= 1 << 2
 	}
+	if s.Align4K() {
+		flags |= 1 << 3
+	}
 	w.writeInt(flags)
 	w.writeInt(s.Size)
 	w.writeRefIndex(s.Gotype)
diff --git a/src/cmd/internal/obj/plist.go b/src/cmd/internal/obj/plist.go
index 5c86c20..11831cd 100644
--- a/src/cmd/internal/obj/plist.go
+++ b/src/cmd/internal/obj/plist.go
@@ -132,6 +132,7 @@ func (ctxt *Link) InitTextSym(s *LSym, flag int) {
 	s.Set(AttrWrapper, flag&WRAPPER != 0)
 	s.Set(AttrNeedCtxt, flag&NEEDCTXT != 0)
 	s.Set(AttrNoFrame, flag&NOFRAME != 0)
+	s.Set(AttrAlign4K, flag&ALIGN4K != 0)
 	s.Type = objabi.STEXT
 	ctxt.Text = append(ctxt.Text, s)
 
@@ -168,6 +169,9 @@ func (ctxt *Link) Globl(s *LSym, size int64, flag int) {
 	if flag&DUPOK != 0 {
 		s.Set(AttrDuplicateOK, true)
 	}
+	if flag&ALIGN4K != 0 {
+		s.Set(AttrAlign4K, true)
+	}
 	if flag&RODATA != 0 {
 		s.Type = objabi.SRODATA
 	} else if flag&NOPTR != 0 {
diff --git a/src/cmd/internal/obj/textflag.go b/src/cmd/internal/obj/textflag.go
index d8a52da..28fb7d5 100644
--- a/src/cmd/internal/obj/textflag.go
+++ b/src/cmd/internal/obj/textflag.go
@@ -47,4 +47,6 @@ const (
 
 	// Function can call reflect.Type.Method or reflect.Type.MethodByName.
 	REFLECTMETHOD = 1024
+
+	ALIGN4K = 2048
 )
diff --git a/src/cmd/link/internal/ld/data.go b/src/cmd/link/internal/ld/data.go
index d724c59..4bf8e08 100644
--- a/src/cmd/link/internal/ld/data.go
+++ b/src/cmd/link/internal/ld/data.go
@@ -32,9 +32,11 @@
 package ld
 
 import (
+	"bytes"
 	"cmd/internal/gcprog"
 	"cmd/internal/objabi"
 	"cmd/internal/sys"
+	"encoding/binary"
 	"fmt"
 	"log"
 	"os"
@@ -2016,6 +2018,69 @@ func (ctxt *Link) textbuildid() {
 	ctxt.Textp[0] = sym
 }
 
+type multibootHdr struct {
+	magic       uint32
+	flags       uint32
+	checksum    uint32
+	headeraddr  uint32
+	loadaddr    uint32
+	loadendaddr uint32
+	bssendaddr  uint32
+	entryaddr   uint32
+}
+
+// Add multiboot header to beginning of text segment. The multiboot header
+// always includes the load and entry addresses to allow for the use of ELF64
+// boot images. This only reserves space for the header -- the values must be
+// filled in later.
+func (ctxt *Link) textmultiboot() {
+	if !*flagMultiboot {
+		return
+	}
+
+	var dummy multibootHdr
+	sym := ctxt.Syms.Lookup("go.multiboot", 0)
+	sym.Attr |= AttrReachable
+	sym.Type = STEXT
+	sym.P = make([]byte, binary.Size(&dummy))
+	sym.Size = int64(len(sym.P))
+	sym.Align = 4
+
+	ctxt.Textp = append(ctxt.Textp, nil)
+	copy(ctxt.Textp[1:], ctxt.Textp)
+	ctxt.Textp[0] = sym
+}
+
+// Fills in multiboot header with finalized addresses.
+func (ctxt *Link) fillmultiboot() {
+	sym := ctxt.Syms.Lookup("go.multiboot", 0)
+	sect := Segtext.Sections[0]
+	end := ctxt.Syms.Lookup("runtime.end", 0).Sect
+	entry := ctxt.Syms.ROLookup(*flagEntrySymbol, 0)
+
+	if sym == nil || entry == nil {
+		return
+	}
+
+	hdr := &multibootHdr{
+		magic:      0x1BADB002,
+		flags:      0x10003,
+		checksum:   0,
+		headeraddr: uint32(sym.Value),
+		// XXX text start must be set such that there's sufficient space to map
+		// the image header.
+		loadaddr: uint32(sect.Vaddr - Segtext.Fileoff),
+		// Load from beginning of text to end of non-bss data sections
+		loadendaddr: uint32(Segdata.Vaddr + Segdata.Filelen),
+		bssendaddr:  uint32(end.Vaddr + end.Length),
+		entryaddr:   uint32(entry.Value),
+	}
+	hdr.checksum = uint32(0) - hdr.flags - hdr.magic
+	buf := new(bytes.Buffer)
+	binary.Write(buf, binary.LittleEndian, hdr)
+	sym.P = buf.Bytes()
+}
+
 // assign addresses to text
 func (ctxt *Link) textaddress() {
 	addsection(&Segtext, ".text", 05)
diff --git a/src/cmd/link/internal/ld/link.go b/src/cmd/link/internal/ld/link.go
index 089b4d3..7ba0b29 100644
--- a/src/cmd/link/internal/ld/link.go
+++ b/src/cmd/link/internal/ld/link.go
@@ -135,6 +135,7 @@ const (
 	// AttrMakeTypelink Amarks types that should be added to the typelink
 	// table. See typelinks.go:typelinks().
 	AttrMakeTypelink
+	AttrAlign4K
 )
 
 func (a Attribute) DuplicateOK() bool      { return a&AttrDuplicateOK != 0 }
@@ -150,6 +151,7 @@ func (a Attribute) OnList() bool           { return a&AttrOnList != 0 }
 func (a Attribute) Local() bool            { return a&AttrLocal != 0 }
 func (a Attribute) ReflectMethod() bool    { return a&AttrReflectMethod != 0 }
 func (a Attribute) MakeTypelink() bool     { return a&AttrMakeTypelink != 0 }
+func (a Attribute) Align4K() bool          { return a&AttrAlign4K != 0 }
 
 func (a Attribute) CgoExport() bool {
 	return a.CgoExportDynamic() || a.CgoExportStatic()
diff --git a/src/cmd/link/internal/ld/main.go b/src/cmd/link/internal/ld/main.go
index 0078064..92715d4 100644
--- a/src/cmd/link/internal/ld/main.go
+++ b/src/cmd/link/internal/ld/main.go
@@ -87,6 +87,7 @@ var (
 	Flag8           bool // use 64-bit addresses in symbol table
 	flagInterpreter = flag.String("I", "", "use `linker` as ELF dynamic linker")
 	FlagDebugTramp  = flag.Int("debugtramp", 0, "debug trampolines")
+	flagMultiboot   = flag.Bool("multiboot", false, "generate multiboot header")
 
 	flagHeadtype    = flag.String("H", "", "set header `type`")
 	FlagRound       = flag.Int("R", -1, "set address rounding `quantum`")
@@ -210,6 +211,7 @@ func Main() {
 	ctxt.addexport()
 	Thearch.Gentext(ctxt) // trampolines, call stubs, etc.
 	ctxt.textbuildid()
+	ctxt.textmultiboot()
 	ctxt.textaddress()
 	ctxt.pclntab()
 	ctxt.findfunctab()
@@ -218,6 +220,7 @@ func Main() {
 	ctxt.dodata()
 	ctxt.address()
 	ctxt.reloc()
+	ctxt.fillmultiboot()
 	Thearch.Asmb(ctxt)
 	ctxt.undef()
 	ctxt.hostlink()
diff --git a/src/cmd/link/internal/ld/objfile.go b/src/cmd/link/internal/ld/objfile.go
index c91fe28..ff36b8f 100644
--- a/src/cmd/link/internal/ld/objfile.go
+++ b/src/cmd/link/internal/ld/objfile.go
@@ -21,8 +21,8 @@ import (
 )
 
 const (
-	startmagic = "\x00\x00go19ld"
-	endmagic   = "\xff\xffgo19ld"
+	startmagic = "\x00\x00gx19ld"
+	endmagic   = "\xff\xffgx19ld"
 )
 
 var emptyPkg = []byte(`"".`)
@@ -169,6 +169,7 @@ func (r *objReader) readSym() {
 	dupok := flags&1 != 0
 	local := flags&2 != 0
 	makeTypelink := flags&4 != 0
+	align4k := flags&8 != 0
 	size := r.readInt()
 	typ := r.readSymIndex()
 	data := r.readData()
@@ -206,6 +207,10 @@ overwrite:
 	if dupok {
 		s.Attr |= AttrDuplicateOK
 	}
+	if align4k {
+		s.Attr |= AttrAlign4K
+		s.Align = 4096
+	}
 	if t == SXREF {
 		log.Fatalf("bad sxref")
 	}
diff --git a/src/runtime/textflag.h b/src/runtime/textflag.h
index 929e9b3..6798765 100644
--- a/src/runtime/textflag.h
+++ b/src/runtime/textflag.h
@@ -32,3 +32,4 @@
 #define NOFRAME 512
 // Function can call reflect.Type.Method or reflect.Type.MethodByName.
 #define REFLECTMETHOD = 1024
+#define ALIGN4K 2048
